<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>{{title}}</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="/socket.io/socket.io.js"></script>
</head>
<body class="bg-gray-900 text-white min-h-screen flex items-center justify-center">
    <div class="flex gap-8 items-start">
        <!-- Camera Section -->
        <div class="flex flex-col gap-4">
            <div class="bg-gray-800 w-[700px] h-[500px] rounded-lg overflow-hidden">
                <video id="videoPreview" class="w-full h-full object-cover" autoplay playsinline></video>
            </div>
            
            <!-- Control Buttons -->
            <div class="flex justify-center gap-4">
                <button id="audioControl" class="p-4 rounded-full border bg-red-500 hover:bg-red-600 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11a7 7 0 01-7 7m0 0a7 7 0 01-7-7m7 7v4m0 0H8m4 0h4m-4-8a3 3 0 01-3-3V5a3 3 0 116 0v6a3 3 0 01-3 3z"/>
                    </svg>
                </button>
                <button id="cameraControl" class="p-4 rounded-full border bg-red-500 hover:bg-red-600 transition">
                    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"/>
                    </svg>
                </button>
            </div>
        </div>

        <!-- Join Form -->
        <div class="flex flex-col gap-4 items-center justify-center">
            <div class="bg-grey-200 p-6 rounded-lg shadow-md w-80">
                <h2 class="text-xl font-bold mb-4">Join Conference</h2>
                <div class="d-flex flex-col mb-4">
                    <input type="text" placeholder="Conference ID" autocomplete="off" class="w-full p-2 border rounded text-black join-input" id="conference-id">
                    <span class="text-[10px] text-[#fcadad] hidden error-message">Conference ID is required</span>
                </div>
                <div class="d-flex flex-col mb-4">
                    <input type="text" placeholder="Username" autocomplete="off" class="w-full p-2 border rounded text-black join-input" id="username">
                    <span class="text-[10px] text-[#fcadad] hidden error-message">Username is required</span>
                </div>
                <button class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition" id="join-room">
                    Join Room
                </button>
            </div>
            <div class="bg-grey-200 p-6 rounded-lg shadow-md w-80">
                <h2 class="text-xl font-bold mb-4">Create Room</h2>
                <div class="mb-4 d-flex flex-col">
                    <input type="text" placeholder="Username" class="w-full p-2 border rounded text-black" id="create-username">
                    <span class="text-[10px] text-[#fcadad] hidden error-message">Username is required</span>
                </div>
                <button class="w-full bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition" id="create-room">
                    Start Conference
                </button>
            </div>
        </div>
    </div>

    <!-- Create Conference Button -->
    <!-- <a href="#" class="fixed bottom-8 right-8 p-6 bg-blue-500 text-white rounded-full hover:bg-blue-600 transition shadow-lg">
        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-8 h-8">
            <path stroke-linecap="round" stroke-linejoin="round" d="M12 4.5v15m7.5-7.5h-15" />
        </svg>
    </a> -->

    <script>
        localStorage.clear()
        const socket = io('http://localhost:3000');
        const videoPreview = document.getElementById('videoPreview');
        const audioControl = document.getElementById('audioControl');
        const cameraControl = document.getElementById('cameraControl');
        let currentStream;
        
        // Media Devices Access
        async function setupStream(enableAudio = true, enableVideo = true) {
            if (currentStream) {
                currentStream.getTracks().forEach(track => track.stop());
            }

            try {
                currentStream = await navigator.mediaDevices.getUserMedia({
                    audio: enableAudio,
                    video: enableVideo
                });
                videoPreview.srcObject = currentStream;
                updateButtonStyles(enableAudio, enableVideo);
            } catch (err) {
                console.error('Error accessing media devices:', err);
            }
        }

        // Toggle Controls
        function toggleTrack(type, button) {
            const tracks = currentStream.getTracks().filter(track => track.kind === type);
            const isEnabled = tracks[0].enabled;
            tracks.forEach(track => track.enabled = !isEnabled);
            updateButtonStyles(
                type === 'audio' ? !isEnabled : audioControl.classList.contains('bg-white-500'),
                type === 'video' ? !isEnabled : cameraControl.classList.contains('bg-white-500')
            );

            localStorage.setItem(type, !isEnabled)
        }

        // Update Button Styles
        function updateButtonStyles(audioEnabled, videoEnabled) {
            audioControl.classList.toggle('bg-red-500', !audioEnabled);
            audioControl.classList.toggle('bg-white-500', audioEnabled);
            cameraControl.classList.toggle('bg-red-500', !videoEnabled);
            cameraControl.classList.toggle('bg-white-500', videoEnabled);
        }

        // Event Listeners
        audioControl.addEventListener('click', () => toggleTrack('audio', audioControl));
        cameraControl.addEventListener('click', () => toggleTrack('video', cameraControl));

        const joinRoom = document.getElementById('join-room')
        const conferenceId = document.getElementById('conference-id')
        const username = document.getElementById('username')
        joinRoom.addEventListener('click', ()=> {
            if(!conferenceId.value || !username.value) {
                const inputs = document.querySelectorAll('.join-input')
                inputs.forEach(input => {
                    if(!input.value) {
                        input.nextElementSibling.classList.remove('hidden')
                    }else{
                        input.nextElementSibling.classList.add('hidden')
                    }
                })

                return
            }

            localStorage.setItem("username", username.value)

            window.location.replace(`/${conferenceId.value}`);
        })

        const createRoom = document.getElementById('create-room')
        const createRoomUser = document.getElementById('create-username')
        const ROOM_ID = '{{roomId}}'
        createRoom.addEventListener('click', ()=> {
            if(!createRoomUser.value) {
                createRoomUser.nextElementSibling.classList.remove('hidden')
                return
            }

            localStorage.setItem("username", createRoomUser.value)

            window.location.replace(`/${ROOM_ID}`);
        })

        // Initial Setup
        setupStream(true, true).then(r => console.log('Stream initialized'));


    </script>
</body>
</html>